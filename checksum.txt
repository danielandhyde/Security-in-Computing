/*=============================================================================
| Assignment: pa02 - Calculating an 8, 16, or 32 bit
| checksum on an ASCII input file
|
| Author: Daniel Thew
| Language: Java
|
| To Compile: javac pa02.java
|
| To Execute: java -> java pa02 inputFile.txt 8
| where inputFile.txt is an ASCII input file
| and the number 8 could also be 16 or 32
| which are the valid checksum sizes, all
| other values are rejected with an error message
| and program termination
|
| Note: All input files are simple 8 bit ASCII input
|
| Class: CIS3360 - Security in Computing - Spring 2022
| Instructor: McAlpin
| Due Date: April 3rd, 2022
|
+=============================================================================*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HexFormat;
import java.util.Scanner;

public class pa02 {

    public static void main(String[] args) throws FileNotFoundException {
        //so long as there is input to the command line
        if(args.length>0){
            //file name comes first, bit count comes second
            String file_name = args[0];
            int bit_count = Integer.parseInt(args[1]);
            //if we have an improper bit count, let the user know
            if(bit_count!=8&&bit_count!=16&&bit_count!=32) System.err.println("Valid checksum sizes are 8, 16, or 32\n");
            //otherwise, run the code
            else {
                //get the file specified by user input
                File input = new File(file_name);
                //set up a scanner for the file
                Scanner hal = new Scanner(input);
                //get the text from the user file
                String text = "";
                while (hal.hasNextLine()) text = text.concat(hal.nextLine());
                text += '\n';
                //echo user text and print the checksum as directed
                System.out.println();
                print_proper(text);
                check_sum(text, bit_count);
            }
        }
        //if the user failed to enter anything, let them know
        else{
            System.out.println("No valid input.");
        }
    }

    //function to echo the user text with 80 chars per line
    public static void print_proper(String text){
        int start = 0;
        while(start + 80 <= text.length()){
            System.out.println(text.substring(start, start+80));
            start += 80;
        }
        System.out.print(text.substring(start));
    }

    //function to pad text with X's, print said X's, and print final checkSum message
    public static void check_sum(String text, int bits){
        //iterator and var for the length of each "word" of bits
        int pos = 0, word_len = bits/8;
        //text length times the total bit per character (8 is standard for ASCII)
        //modulated by the checksum bits. There should be evenly divided "words"
        while((text.length()*8)%bits!=0){
            text = text.concat("X");
            System.out.print("X");
        }
        System.out.println();
        //this is the "final" length of the text after padding
        int hold_len = text.length();
        //array of the hex words we'll be using in our checksum calculation
        String[] word_arr = new String[(text.length()*8)/bits];
        //while we still have more words to go
        while(text.length()>0){
            //holder string
            String temp_str = "";
            //for the length of each "word"
            for(int a = 0; a < word_len; a++){
                //get the hex string at the current char
                String cat = Integer.toHexString(text.charAt(a));
                //if it's a single-digit length, append a 0 (mainly for newline)
                if(cat.length()==1) cat = "0"+cat;
                //concat this string to the holder
                temp_str = temp_str.concat(cat);
            }
            //put the holder in its rightful spot determined by the loop iterator
            word_arr[pos] = temp_str;
            //iterate
            pos++;
            //reduce text
            text = text.substring(word_len);
        }
        //holds the eventual checksum
        int hold_sum = 0;
        //the value that is 1 greater than the max value stored in the given number of bits
        int max = (int)Math.pow(2, bits);//if number is greater than or equal to this, shift number 1 left
        //for the length of the array of "words"
        for(int b = 0; b < word_arr.length; b++){
            //get the int from the hex word, add to our checksum
            int adder = HexFormat.fromHexDigits(word_arr[b]);
            hold_sum += adder;
            //if the checksum has overflow, eliminate the leading 1
            if(hold_sum>=max) hold_sum-=max;
        }
        //print the proper output
        System.out.printf("%2d bit checksum is %8x for all %4d chars\n", bits, Integer.toUnsignedLong(hold_sum), hold_len);
    }
}

/*=============================================================================
| I Daniel Thew (da642780) affirm that this program is
| entirely my own work and that I have neither developed my code together with
| any another person, nor copied any code from any other person, nor permitted
| my code to be copied or otherwise used by any other person, nor have I
| copied, modified, or otherwise used programs created by others. I acknowledge
| that any violation of the above terms will be treated as academic dishonesty.
+=============================================================================*/